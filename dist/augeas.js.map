{"version":3,"file":"augeas.js","sources":["../node_modules/lit-html/lit-html.js","../node_modules/lit-html/lib/lit-extended.js","../node_modules/@polymer/polymer/lib/utils/boot.js","../node_modules/@polymer/polymer/lib/utils/mixin.js","../node_modules/@polymer/polymer/lib/utils/case-map.js","../node_modules/@polymer/polymer/lib/utils/async.js","../node_modules/@polymer/polymer/lib/mixins/property-accessors.js","../src/template-registry/template-registry.js","../src/template-registry/index.js","../src/elements/ags-view.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n// The first argument to JS template tags retain identity across multiple\n// calls to a tag for the same literal, so we can cache work done per literal\n// in a Map.\nconst templates = new Map();\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport function html(strings, ...values) {\n    let template = templates.get(strings);\n    if (template === undefined) {\n        template = new Template(strings);\n        templates.set(strings, template);\n    }\n    return new TemplateResult(template, values);\n}\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(template, values) {\n        this.template = template;\n        this.values = values;\n    }\n}\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n */\nexport function render(result, container, partCallback = defaultPartCallback) {\n    let instance = container.__templateInstance;\n    // Repeat render, just call update()\n    if (instance !== undefined && instance.template === result.template &&\n        instance._partCallback === partCallback) {\n        instance.update(result.values);\n        return;\n    }\n    // First render, create a new TemplateInstance and append it\n    instance = new TemplateInstance(result.template, partCallback);\n    container.__templateInstance = instance;\n    const fragment = instance._clone();\n    instance.update(result.values);\n    let child;\n    while ((child = container.lastChild)) {\n        container.removeChild(child);\n    }\n    container.appendChild(fragment);\n}\n/**\n * An expression marker with embedded unique key to avoid\n * https://github.com/PolymerLabs/lit-html/issues/62\n */\nconst exprMarker = `{{lit-${Math.random()}}}`;\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport class TemplatePart {\n    constructor(type, index, name, rawName, strings) {\n        this.type = type;\n        this.index = index;\n        this.name = name;\n        this.rawName = rawName;\n        this.strings = strings;\n    }\n}\nexport class Template {\n    constructor(strings) {\n        this.parts = [];\n        this.element = document.createElement('template');\n        this.element.innerHTML = strings.join(exprMarker);\n        const walker = document.createTreeWalker(this.element.content, 5 /* elements & text */);\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        while (walker.nextNode()) {\n            index++;\n            const node = walker.currentNode;\n            if (node.nodeType === 1 /* ELEMENT_NODE */) {\n                if (!node.hasAttributes())\n                    continue;\n                const attributes = node.attributes;\n                for (let i = 0; i < attributes.length; i++) {\n                    const attribute = attributes.item(i);\n                    const attributeStrings = attribute.value.split(exprMarker);\n                    if (attributeStrings.length > 1) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute attribute\n                        const attributeString = strings[partIndex];\n                        // Trim the trailing literal value if this is an interpolation\n                        const rawNameString = attributeString.substring(0, attributeString.length - attributeStrings[0].length);\n                        // Find the attribute name\n                        const rawName = rawNameString.match(/((?:\\w|[.\\-_$])+)=[\"']?$/)[1];\n                        this.parts.push(new TemplatePart('attribute', index, attribute.name, rawName, attributeStrings));\n                        node.removeAttribute(attribute.name);\n                        partIndex += attributeStrings.length - 1;\n                        i--;\n                    }\n                }\n            }\n            else if (node.nodeType === 3 /* TEXT_NODE */) {\n                const strings = node.nodeValue.split(exprMarker);\n                if (strings.length > 1) {\n                    const parent = node.parentNode;\n                    const lastIndex = strings.length - 1;\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                    // We keep this current node, but reset its content to the last\n                    // literal part. We insert new literal nodes before this so that the\n                    // tree walker keeps its position correctly.\n                    node.textContent = strings[lastIndex];\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        parent.insertBefore(new Text(strings[i]), node);\n                        this.parts.push(new TemplatePart('node', index++));\n                    }\n                }\n                else if (!node.nodeValue.trim()) {\n                    nodesToRemove.push(node);\n                    index--;\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nexport const getValue = (part, value) => {\n    // `null` as the value of a Text node will render the string 'null'\n    // so we convert it to undefined\n    if (value != null && value.__litDirective === true) {\n        value = value(part);\n    }\n    return value === null ? undefined : value;\n};\nexport const directive = (f) => {\n    f.__litDirective = true;\n    return f;\n};\nexport class AttributePart {\n    constructor(instance, element, name, strings) {\n        this.instance = instance;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.size = strings.length - 1;\n    }\n    setValue(values, startIndex) {\n        const strings = this.strings;\n        let text = '';\n        for (let i = 0; i < strings.length; i++) {\n            text += strings[i];\n            if (i < strings.length - 1) {\n                const v = getValue(this, values[startIndex + i]);\n                if (v &&\n                    (Array.isArray(v) || typeof v !== 'string' && v[Symbol.iterator])) {\n                    for (const t of v) {\n                        // TODO: we need to recursively call getValue into iterables...\n                        text += t;\n                    }\n                }\n                else {\n                    text += v;\n                }\n            }\n        }\n        this.element.setAttribute(this.name, text);\n    }\n}\nexport class NodePart {\n    constructor(instance, startNode, endNode) {\n        this.instance = instance;\n        this.startNode = startNode;\n        this.endNode = endNode;\n    }\n    setValue(value) {\n        value = getValue(this, value);\n        if (value === null ||\n            !(typeof value === 'object' || typeof value === 'function')) {\n            // Handle primitive values\n            // If the value didn't change, do nothing\n            if (value === this._previousValue) {\n                return;\n            }\n            this._setText(value);\n        }\n        else if (value instanceof TemplateResult) {\n            this._setTemplateResult(value);\n        }\n        else if (Array.isArray(value) || value[Symbol.iterator]) {\n            this._setIterable(value);\n        }\n        else if (value instanceof Node) {\n            this._setNode(value);\n        }\n        else if (value.then !== undefined) {\n            this._setPromise(value);\n        }\n        else {\n            // Fallback, will render the string representation\n            this._setText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _setNode(value) {\n        this.clear();\n        this._insert(value);\n        this._previousValue = value;\n    }\n    _setText(value) {\n        const node = this.startNode.nextSibling;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === Node.TEXT_NODE) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if _previousValue is\n            // primitive?\n            node.textContent = value;\n        }\n        else {\n            this._setNode(new Text(value));\n        }\n        this._previousValue = value;\n    }\n    _setTemplateResult(value) {\n        let instance;\n        if (this._previousValue &&\n            this._previousValue.template === value.template) {\n            instance = this._previousValue;\n        }\n        else {\n            instance =\n                new TemplateInstance(value.template, this.instance._partCallback);\n            this._setNode(instance._clone());\n            this._previousValue = instance;\n        }\n        instance.update(value.values);\n    }\n    _setIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _previousValue is an array, then the previous render was of an\n        // iterable and _previousValue will contain the NodeParts from the previous\n        // render. If _previousValue is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this._previousValue)) {\n            this.clear();\n            this._previousValue = [];\n        }\n        // Lets of keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this._previousValue;\n        let partIndex = 0;\n        for (const item of value) {\n            // Try to reuse an existing part\n            let itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                // If we're creating the first item part, it's startNode should be the\n                // container's startNode\n                let itemStart = this.startNode;\n                // If we're not creating the first part, create a new separator marker\n                // node, and fix up the previous part's endNode to point to it\n                if (partIndex > 0) {\n                    const previousPart = itemParts[partIndex - 1];\n                    itemStart = previousPart.endNode = new Text();\n                    this._insert(itemStart);\n                }\n                itemPart = new NodePart(this.instance, itemStart, this.endNode);\n                itemParts.push(itemPart);\n            }\n            itemPart.setValue(item);\n            partIndex++;\n        }\n        if (partIndex === 0) {\n            this.clear();\n            this._previousValue = undefined;\n        }\n        else if (partIndex < itemParts.length) {\n            const lastPart = itemParts[partIndex - 1];\n            this.clear(lastPart.endNode.previousSibling);\n            lastPart.endNode = this.endNode;\n        }\n    }\n    _setPromise(value) {\n        value.then((v) => {\n            if (this._previousValue === value) {\n                this.setValue(v);\n            }\n        });\n        this._previousValue = value;\n    }\n    clear(startNode = this.startNode) {\n        let node;\n        while ((node = startNode.nextSibling) !== this.endNode) {\n            node.parentNode.removeChild(node);\n        }\n    }\n}\nexport const defaultPartCallback = (instance, templatePart, node) => {\n    if (templatePart.type === 'attribute') {\n        return new AttributePart(instance, node, templatePart.name, templatePart.strings);\n    }\n    else if (templatePart.type === 'node') {\n        return new NodePart(instance, node, node.nextSibling);\n    }\n    throw new Error(`Unknown part type ${templatePart.type}`);\n};\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, partCallback = defaultPartCallback) {\n        this._parts = [];\n        this.template = template;\n        this._partCallback = partCallback;\n    }\n    update(values) {\n        let valueIndex = 0;\n        for (const part of this._parts) {\n            if (part.size === undefined) {\n                part.setValue(values[valueIndex]);\n                valueIndex++;\n            }\n            else {\n                part.setValue(values, valueIndex);\n                valueIndex += part.size;\n            }\n        }\n    }\n    _clone() {\n        const fragment = document.importNode(this.template.element.content, true);\n        if (this.template.parts.length > 0) {\n            const walker = document.createTreeWalker(fragment, 5 /* elements & text */);\n            const parts = this.template.parts;\n            let index = 0;\n            let partIndex = 0;\n            let templatePart = parts[0];\n            let node = walker.nextNode();\n            while (node != null && partIndex < parts.length) {\n                if (index === templatePart.index) {\n                    this._parts.push(this._partCallback(this, templatePart, node));\n                    templatePart = parts[++partIndex];\n                }\n                else {\n                    index++;\n                    node = walker.nextNode();\n                }\n            }\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, defaultPartCallback, getValue, render as baseRender } from '../lit-html.js';\nexport { html } from '../lit-html.js';\n/**\n *\n * @param result Renders a `TemplateResult` to a container using the\n * `extendedPartCallback` PartCallback, which allows templates to set\n * properties and declarative event handlers.\n *\n * Properties are set by default, instead of attributes. Attribute names in\n * lit-html templates preserve case, so properties are case sensitive. If an\n * expression takes up an entire attribute value, then the property is set to\n * that value. If an expression is interpolated with a string or other\n * expressions then the property is set to the string result of the\n * interpolation.\n *\n * To set an attribute instead of a property, append a `$` suffix to the\n * attribute name.\n *\n * Example:\n *\n *     html`<button class$=\"primary\">Buy Now</button>`\n *\n * To set an event handler, prefix the attribute name with `on-`:\n *\n * Example:\n *\n *     html`<button on-click=${(e)=> this.onClickHandler(e)}>Buy Now</button>`\n *\n */\nexport function render(result, container) {\n    baseRender(result, container, extendedPartCallback);\n}\nexport const extendedPartCallback = (instance, templatePart, node) => {\n    if (templatePart.type === 'attribute') {\n        if (templatePart.rawName.startsWith('on-')) {\n            const eventName = templatePart.rawName.substring(3);\n            return new EventPart(instance, node, eventName);\n        }\n        if (templatePart.name.endsWith('$')) {\n            const name = templatePart.name.substring(0, templatePart.name.length - 1);\n            return new AttributePart(instance, node, name, templatePart.strings);\n        }\n        return new PropertyPart(instance, node, templatePart.rawName, templatePart.strings);\n    }\n    return defaultPartCallback(instance, templatePart, node);\n};\nexport class PropertyPart extends AttributePart {\n    setValue(values, startIndex) {\n        const s = this.strings;\n        let value;\n        if (s.length === 2 && s[0] === '' && s[s.length - 1] === '') {\n            // An expression that occupies the whole attribute value will leave\n            // leading and trailing empty strings.\n            value = getValue(this, values[startIndex]);\n        }\n        else {\n            // Interpolation, so interpolate\n            value = '';\n            for (let i = 0; i < s.length; i++) {\n                value += s[i];\n                if (i < s.length - 1) {\n                    value += getValue(this, values[startIndex + i]);\n                }\n            }\n        }\n        this.element[this.name] = value;\n    }\n}\nexport class EventPart {\n    constructor(instance, element, eventName) {\n        this.instance = instance;\n        this.element = element;\n        this.eventName = eventName;\n    }\n    setValue(value) {\n        const listener = getValue(this, value);\n        if (listener === this._listener) {\n            return;\n        }\n        if (listener == null) {\n            this.element.removeEventListener(this.eventName, this);\n        }\n        else if (this._listener == null) {\n            this.element.addEventListener(this.eventName, this);\n        }\n        this._listener = listener;\n    }\n    handleEvent(event) {\n        if (typeof this._listener === 'function') {\n            this._listener.call(this.element, event);\n        }\n        else if (typeof this._listener.handleEvent === 'function') {\n            this._listener.handleEvent(event);\n        }\n    }\n}\n//# sourceMappingURL=lit-extended.js.map","window.JSCompiler_renameProperty = function(prop, obj) { return prop; }\n\n/** @namespace */\nlet Polymer;\n","import './boot.js';\n\n// unique global id for deduping mixins.\nlet dedupeId = 0;\n\n/**\n * @constructor\n * @extends {Function}\n */\nfunction MixinFunction(){}\n/** @type {(WeakMap | undefined)} */\nMixinFunction.prototype.__mixinApplications;\n/** @type {(Object | undefined)} */\nMixinFunction.prototype.__mixinSet;\n\nexport const dedupingMixin = function(mixin) {\n  let mixinApplications = /** @type {!MixinFunction} */(mixin).__mixinApplications;\n  if (!mixinApplications) {\n    mixinApplications = new WeakMap();\n    /** @type {!MixinFunction} */(mixin).__mixinApplications = mixinApplications;\n  }\n  // maintain a unique id for each mixin\n  let mixinDedupeId = dedupeId++;\n  function dedupingMixin(base) {\n    let baseSet = /** @type {!MixinFunction} */(base).__mixinSet;\n    if (baseSet && baseSet[mixinDedupeId]) {\n      return base;\n    }\n    let map = mixinApplications;\n    let extended = map.get(base);\n    if (!extended) {\n      extended = /** @type {!Function} */(mixin)(base);\n      map.set(base, extended);\n    }\n    // copy inherited mixin set from the extended class, or the base class\n    // NOTE: we avoid use of Set here because some browser (IE11)\n    // cannot extend a base Set via the constructor.\n    let mixinSet = Object.create(/** @type {!MixinFunction} */(extended).__mixinSet || baseSet || null);\n    mixinSet[mixinDedupeId] = true;\n    /** @type {!MixinFunction} */(extended).__mixinSet = mixinSet;\n    return extended;\n  }\n\n  return dedupingMixin;\n};\n","import './boot.js';\n\nconst caseMap = {};\nconst DASH_TO_CAMEL = /-[a-z]/g;\nconst CAMEL_TO_DASH = /([A-Z])/g;\n\nexport function dashToCamelCase(dash) {\n  return caseMap[dash] || (\n    caseMap[dash] = dash.indexOf('-') < 0 ? dash : dash.replace(DASH_TO_CAMEL,\n      (m) => m[1].toUpperCase()\n    )\n  );\n}\n\nexport function camelToDashCase(camel) {\n  return caseMap[camel] || (\n    caseMap[camel] = camel.replace(CAMEL_TO_DASH, '-$1').toLowerCase()\n  );\n}\n","import './boot.js';\n\n/** @typedef {{run: function(function(), number=):number, cancel: function(number)}} */\nlet AsyncInterface; // eslint-disable-line no-unused-vars\n\n// Microtask implemented using Mutation Observer\nlet microtaskCurrHandle = 0;\nlet microtaskLastHandle = 0;\nlet microtaskCallbacks = [];\nlet microtaskNodeContent = 0;\nlet microtaskNode = document.createTextNode('');\nnew window.MutationObserver(microtaskFlush).observe(microtaskNode, {characterData: true});\n\nfunction microtaskFlush() {\n  const len = microtaskCallbacks.length;\n  for (let i = 0; i < len; i++) {\n    let cb = microtaskCallbacks[i];\n    if (cb) {\n      try {\n        cb();\n      } catch (e) {\n        setTimeout(() => { throw e; });\n      }\n    }\n  }\n  microtaskCallbacks.splice(0, len);\n  microtaskLastHandle += len;\n}\n\nexport const timeOut = {\n  /**\n   * Returns a sub-module with the async interface providing the provided\n   * delay.\n   *\n   * @memberof Polymer.Async.timeOut\n   * @param {number} delay Time to wait before calling callbacks in ms\n   * @return {AsyncInterface} An async timeout interface\n   */\n  after(delay) {\n    return  {\n      run(fn) { return setTimeout(fn, delay); },\n      cancel: window.clearTimeout.bind(window)\n    };\n  },\n  /**\n   * Enqueues a function called in the next task.\n   *\n   * @memberof Polymer.Async.timeOut\n   * @param {Function} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run: window.setTimeout.bind(window),\n  /**\n   * Cancels a previously enqueued `timeOut` callback.\n   *\n   * @memberof Polymer.Async.timeOut\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   */\n  cancel: window.clearTimeout.bind(window)\n};\n\nexport const animationFrame = {\n  /**\n   * Enqueues a function called at `requestAnimationFrame` timing.\n   *\n   * @memberof Polymer.Async.animationFrame\n   * @param {Function} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run: window.requestAnimationFrame.bind(window),\n  /**\n   * Cancels a previously enqueued `animationFrame` callback.\n   *\n   * @memberof Polymer.Async.timeOut\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   */\n  cancel: window.cancelAnimationFrame.bind(window)\n};\n\nexport const idlePeriod = {\n  /**\n   * Enqueues a function called at `requestIdleCallback` timing.\n   *\n   * @memberof Polymer.Async.idlePeriod\n   * @param {function(IdleDeadline)} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(fn) {\n    return window.requestIdleCallback ?\n      window.requestIdleCallback(fn) :\n      window.setTimeout(fn, 16);\n  },\n  /**\n   * Cancels a previously enqueued `idlePeriod` callback.\n   *\n   * @memberof Polymer.Async.idlePeriod\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   */\n  cancel(handle) {\n    window.cancelIdleCallback ?\n      window.cancelIdleCallback(handle) :\n      window.clearTimeout(handle);\n  }\n};\n\nexport const microTask = {\n\n  /**\n   * Enqueues a function called at microtask timing.\n   *\n   * @memberof Polymer.Async.microTask\n   * @param {Function} callback Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(callback) {\n    microtaskNode.textContent = microtaskNodeContent++;\n    microtaskCallbacks.push(callback);\n    return microtaskCurrHandle++;\n  },\n\n  /**\n   * Cancels a previously enqueued `microTask` callback.\n   *\n   * @memberof Polymer.Async.microTask\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   */\n  cancel(handle) {\n    const idx = handle - microtaskLastHandle;\n    if (idx >= 0) {\n      if (!microtaskCallbacks[idx]) {\n        throw new Error('invalid async handle: ' + handle);\n      }\n      microtaskCallbacks[idx] = null;\n    }\n  }\n\n};\n","import '../utils/boot.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport * as caseMap$0 from '../utils/case-map.js';\nimport { microTask } from '../utils/async.js';\n\nlet caseMap = caseMap$0;\n\nlet microtask = microTask;\n\n// Save map of native properties; this forms a blacklist or properties\n// that won't have their values \"saved\" by `saveAccessorValue`, since\n// reading from an HTMLElement accessor from the context of a prototype throws\nconst nativeProperties = {};\nlet proto = HTMLElement.prototype;\nwhile (proto) {\n  let props = Object.getOwnPropertyNames(proto);\n  for (let i=0; i<props.length; i++) {\n    nativeProperties[props[i]] = true;\n  }\n  proto = Object.getPrototypeOf(proto);\n}\n\n/**\n * Used to save the value of a property that will be overridden with\n * an accessor. If the `model` is a prototype, the values will be saved\n * in `__dataProto`, and it's up to the user (or downstream mixin) to\n * decide how/when to set these values back into the accessors.\n * If `model` is already an instance (it has a `__data` property), then\n * the value will be set as a pending property, meaning the user should\n * call `_invalidateProperties` or `_flushProperties` to take effect\n *\n * @param {Object} model Prototype or instance\n * @param {string} property Name of property\n * @private\n */\nfunction saveAccessorValue(model, property) {\n  // Don't read/store value for any native properties since they could throw\n  if (!nativeProperties[property]) {\n    let value = model[property];\n    if (value !== undefined) {\n      if (model.__data) {\n        // Adding accessor to instance; update the property\n        // It is the user's responsibility to call _flushProperties\n        model._setPendingProperty(property, value);\n      } else {\n        // Adding accessor to proto; save proto's value for instance-time use\n        if (!model.__dataProto) {\n          model.__dataProto = {};\n        } else if (!model.hasOwnProperty(JSCompiler_renameProperty('__dataProto', model))) {\n          model.__dataProto = Object.create(model.__dataProto);\n        }\n        model.__dataProto[property] = value;\n      }\n    }\n  }\n}\n\nexport const PropertyAccessors = dedupingMixin(superClass => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertyAccessors}\n   * @extends HTMLElement\n   * @unrestricted\n   */\n  class PropertyAccessors extends superClass {\n\n    /**\n     * Generates property accessors for all attributes in the standard\n     * static `observedAttributes` array.\n     *\n     * Attribute names are mapped to property names using the `dash-case` to\n     * `camelCase` convention\n     *\n     */\n    static createPropertiesForAttributes() {\n      let a$ = this.observedAttributes;\n      for (let i=0; i < a$.length; i++) {\n        this.prototype._createPropertyAccessor(caseMap.dashToCamelCase(a$[i]));\n      }\n    }\n\n    constructor() {\n      super();\n      /** @type {boolean} */\n      this.__serializing;\n      /** @type {number} */\n      this.__dataCounter;\n      /** @type {boolean} */\n      this.__dataEnabled;\n      /** @type {boolean} */\n      this.__dataReady;\n      /** @type {boolean} */\n      this.__dataInvalid;\n      /** @type {!Object} */\n      this.__data;\n      /** @type {Object} */\n      this.__dataPending;\n      /** @type {Object} */\n      this.__dataOld;\n      /** @type {Object} */\n      this.__dataProto;\n      /** @type {Object} */\n      this.__dataHasAccessor;\n      /** @type {Object} */\n      this.__dataInstanceProps;\n      this._initializeProperties();\n    }\n\n    /**\n     * Implements native Custom Elements `attributeChangedCallback` to\n     * set an attribute value to a property via `_attributeToProperty`.\n     *\n     * @param {string} name Name of attribute that changed\n     * @param {?string} old Old attribute value\n     * @param {?string} value New attribute value\n     */\n    attributeChangedCallback(name, old, value) {\n      if (old !== value) {\n        this._attributeToProperty(name, value);\n      }\n    }\n\n    /**\n     * Initializes the local storage for property accessors.\n     *\n     * Provided as an override point for performing any setup work prior\n     * to initializing the property accessor system.\n     *\n     * @protected\n     */\n    _initializeProperties() {\n      this.__serializing = false;\n      this.__dataCounter = 0;\n      this.__dataEnabled = false;\n      this.__dataReady = false;\n      this.__dataInvalid = false;\n      this.__data = {};\n      this.__dataPending = null;\n      this.__dataOld = null;\n      if (this.__dataProto) {\n        this._initializeProtoProperties(this.__dataProto);\n        this.__dataProto = null;\n      }\n      // Capture instance properties; these will be set into accessors\n      // during first flush. Don't set them here, since we want\n      // these to overwrite defaults/constructor assignments\n      for (let p in this.__dataHasAccessor) {\n        if (this.hasOwnProperty(p)) {\n          this.__dataInstanceProps = this.__dataInstanceProps || {};\n          this.__dataInstanceProps[p] = this[p];\n          delete this[p];\n        }\n      }\n    }\n\n    /**\n     * Called at instance time with bag of properties that were overwritten\n     * by accessors on the prototype when accessors were created.\n     *\n     * The default implementation sets these properties back into the\n     * setter at instance time.  This method is provided as an override\n     * point for customizing or providing more efficient initialization.\n     *\n     * @param {Object} props Bag of property values that were overwritten\n     *   when creating property accessors.\n     * @protected\n     */\n    _initializeProtoProperties(props) {\n      for (let p in props) {\n        this._setProperty(p, props[p]);\n      }\n    }\n\n    /**\n     * Called at ready time with bag of instance properties that overwrote\n     * accessors when the element upgraded.\n     *\n     * The default implementation sets these properties back into the\n     * setter at ready time.  This method is provided as an override\n     * point for customizing or providing more efficient initialization.\n     *\n     * @param {Object} props Bag of property values that were overwritten\n     *   when creating property accessors.\n     * @protected\n     */\n    _initializeInstanceProperties(props) {\n      Object.assign(this, props);\n    }\n\n    /**\n     * Ensures the element has the given attribute. If it does not,\n     * assigns the given value to the attribute.\n     *\n     *\n     * @param {string} attribute Name of attribute to ensure is set.\n     * @param {string} value of the attribute.\n     */\n    _ensureAttribute(attribute, value) {\n      if (!this.hasAttribute(attribute)) {\n        this._valueToNodeAttribute(this, value, attribute);\n      }\n    }\n\n    /**\n     * Deserializes an attribute to its associated property.\n     *\n     * This method calls the `_deserializeValue` method to convert the string to\n     * a typed value.\n     *\n     * @param {string} attribute Name of attribute to deserialize.\n     * @param {?string} value of the attribute.\n     * @param {*=} type type to deserialize to.\n     */\n    _attributeToProperty(attribute, value, type) {\n      // Don't deserialize back to property if currently reflecting\n      if (!this.__serializing) {\n        let property = caseMap.dashToCamelCase(attribute);\n        this[property] = this._deserializeValue(value, type);\n      }\n    }\n\n    /**\n     * Serializes a property to its associated attribute.\n     *\n     * @param {string} property Property name to reflect.\n     * @param {string=} attribute Attribute name to reflect.\n     * @param {*=} value Property value to refect.\n     */\n    _propertyToAttribute(property, attribute, value) {\n      this.__serializing = true;\n      value = (arguments.length < 3) ? this[property] : value;\n      this._valueToNodeAttribute(this, value,\n        attribute || caseMap.camelToDashCase(property));\n      this.__serializing = false;\n    }\n\n    /**\n     * Sets a typed value to an HTML attribute on a node.\n     *\n     * This method calls the `_serializeValue` method to convert the typed\n     * value to a string.  If the `_serializeValue` method returns `undefined`,\n     * the attribute will be removed (this is the default for boolean\n     * type `false`).\n     *\n     * @param {Element} node Element to set attribute to.\n     * @param {*} value Value to serialize.\n     * @param {string} attribute Attribute name to serialize to.\n     */\n    _valueToNodeAttribute(node, value, attribute) {\n      let str = this._serializeValue(value);\n      if (str === undefined) {\n        node.removeAttribute(attribute);\n      } else {\n        node.setAttribute(attribute, str);\n      }\n    }\n\n    /**\n     * Converts a typed JavaScript value to a string.\n     *\n     * This method is called by Polymer when setting JS property values to\n     * HTML attributes.  Users may override this method on Polymer element\n     * prototypes to provide serialization for custom types.\n     *\n     * @param {*} value Property value to serialize.\n     * @return {string | undefined} String serialized from the provided property value.\n     */\n    _serializeValue(value) {\n      /* eslint-disable no-fallthrough */\n      switch (typeof value) {\n        case 'boolean':\n          return value ? '' : undefined;\n\n        case 'object':\n          if (value instanceof Date) {\n            return value.toString();\n          } else if (value) {\n            try {\n              return JSON.stringify(value);\n            } catch(x) {\n              return '';\n            }\n          }\n\n        default:\n          return value != null ? value.toString() : undefined;\n      }\n    }\n\n    /**\n     * Converts a string to a typed JavaScript value.\n     *\n     * This method is called by Polymer when reading HTML attribute values to\n     * JS properties.  Users may override this method on Polymer element\n     * prototypes to provide deserialization for custom `type`s.  Note,\n     * the `type` argument is the value of the `type` field provided in the\n     * `properties` configuration object for a given property, and is\n     * by convention the constructor for the type to deserialize.\n     *\n     * Note: The return value of `undefined` is used as a sentinel value to\n     * indicate the attribute should be removed.\n     *\n     * @param {?string} value Attribute value to deserialize.\n     * @param {*=} type Type to deserialize the string to.\n     * @return {*} Typed value deserialized from the provided string.\n     */\n    _deserializeValue(value, type) {\n      /**\n       * @type {*}\n       */\n      let outValue;\n      switch (type) {\n        case Number:\n          outValue = Number(value);\n          break;\n\n        case Boolean:\n          outValue = (value !== null);\n          break;\n\n        case Object:\n          try {\n            outValue = JSON.parse(/** @type string */(value));\n          } catch(x) {\n            // allow non-JSON literals like Strings and Numbers\n          }\n          break;\n\n        case Array:\n          try {\n            outValue = JSON.parse(/** @type string */(value));\n          } catch(x) {\n            outValue = null;\n            console.warn(`Polymer::Attributes: couldn't decode Array as JSON: ${value}`);\n          }\n          break;\n\n        case Date:\n          outValue = new Date(value);\n          break;\n\n        case String:\n        default:\n          outValue = value;\n          break;\n      }\n\n      return outValue;\n    }\n    /* eslint-enable no-fallthrough */\n\n    /**\n     * Creates a setter/getter pair for the named property with its own\n     * local storage.  The getter returns the value in the local storage,\n     * and the setter calls `_setProperty`, which updates the local storage\n     * for the property and enqueues a `_propertiesChanged` callback.\n     *\n     * This method may be called on a prototype or an instance.  Calling\n     * this method may overwrite a property value that already exists on\n     * the prototype/instance by creating the accessor.  When calling on\n     * a prototype, any overwritten values are saved in `__dataProto`,\n     * and it is up to the subclasser to decide how/when to set those\n     * properties back into the accessor.  When calling on an instance,\n     * the overwritten value is set via `_setPendingProperty`, and the\n     * user should call `_invalidateProperties` or `_flushProperties`\n     * for the values to take effect.\n     *\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created; the\n     *   protected `_setProperty` function must be used to set the property\n     * @protected\n     */\n    _createPropertyAccessor(property, readOnly) {\n      if (!this.hasOwnProperty('__dataHasAccessor')) {\n        this.__dataHasAccessor = Object.assign({}, this.__dataHasAccessor);\n      }\n      if (!this.__dataHasAccessor[property]) {\n        this.__dataHasAccessor[property] = true;\n        saveAccessorValue(this, property);\n        Object.defineProperty(this, property, {\n          /* eslint-disable valid-jsdoc */\n          /** @this {PropertyAccessors} */\n          get: function() {\n            return this.__data[property];\n          },\n          /** @this {PropertyAccessors} */\n          set: readOnly ? function() {} : function(value) {\n            this._setProperty(property, value);\n          }\n          /* eslint-enable */\n        });\n      }\n    }\n\n    /**\n     * Returns true if this library created an accessor for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if an accessor was created\n     */\n    _hasAccessor(property) {\n      return this.__dataHasAccessor && this.__dataHasAccessor[property];\n    }\n\n    /**\n     * Updates the local storage for a property (via `_setPendingProperty`)\n     * and enqueues a `_proeprtiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @protected\n     */\n    _setProperty(property, value) {\n      if (this._setPendingProperty(property, value)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Updates the local storage for a property, records the previous value,\n     * and adds it to the set of \"pending changes\" that will be passed to the\n     * `_propertiesChanged` callback.  This method does not enqueue the\n     * `_propertiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @return {boolean} Returns true if the property changed\n     * @protected\n     */\n    _setPendingProperty(property, value) {\n      let old = this.__data[property];\n      let changed = this._shouldPropertyChange(property, value, old);\n      if (changed) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (this.__dataOld && !(property in this.__dataOld)) {\n          this.__dataOld[property] = old;\n        }\n        this.__data[property] = value;\n        this.__dataPending[property] = value;\n      }\n      return changed;\n    }\n\n    /**\n     * Returns true if the specified property has a pending change.\n     *\n     * @param {string} prop Property name\n     * @return {boolean} True if property has a pending change\n     * @protected\n     */\n    _isPropertyPending(prop) {\n      return Boolean(this.__dataPending && (prop in this.__dataPending));\n    }\n\n    /**\n     * Marks the properties as invalid, and enqueues an async\n     * `_propertiesChanged` callback.\n     *\n     * @protected\n     */\n    _invalidateProperties() {\n      if (!this.__dataInvalid && this.__dataReady) {\n        this.__dataInvalid = true;\n        microtask.run(() => {\n          if (this.__dataInvalid) {\n            this.__dataInvalid = false;\n            this._flushProperties();\n          }\n        });\n      }\n    }\n\n    /**\n     * Call to enable property accessor processing. Before this method is\n     * called accessor values will be set but side effects are\n     * queued. When called, any pending side effects occur immediately.\n     * For elements, generally `connectedCallback` is a normal spot to do so.\n     * It is safe to call this method multiple times as it only turns on\n     * property accessors once.\n     */\n    _enableProperties() {\n      if (!this.__dataEnabled) {\n        this.__dataEnabled = true;\n        if (this.__dataInstanceProps) {\n          this._initializeInstanceProperties(this.__dataInstanceProps);\n          this.__dataInstanceProps = null;\n        }\n        this.ready();\n      }\n    }\n\n    /**\n     * Calls the `_propertiesChanged` callback with the current set of\n     * pending changes (and old values recorded when pending changes were\n     * set), and resets the pending set of changes. Generally, this method\n     * should not be called in user code.\n     *\n     *\n     * @protected\n     */\n    _flushProperties() {\n      if (this.__dataPending && this.__dataOld) {\n        let changedProps = this.__dataPending;\n        this.__dataPending = null;\n        this.__dataCounter++;\n        this._propertiesChanged(this.__data, changedProps, this.__dataOld);\n        this.__dataCounter--;\n      }\n    }\n\n    /**\n     * Lifecycle callback called the first time properties are being flushed.\n     * Prior to `ready`, all property sets through accessors are queued and\n     * their effects are flushed after this method returns.\n     *\n     * Users may override this function to implement behavior that is\n     * dependent on the element having its properties initialized, e.g.\n     * from defaults (initialized from `constructor`, `_initializeProperties`),\n     * `attributeChangedCallback`, or values propagated from host e.g. via\n     * bindings.  `super.ready()` must be called to ensure the data system\n     * becomes enabled.\n     *\n     * @public\n     */\n    ready() {\n      this.__dataReady = true;\n      // Run normal flush\n      this._flushProperties();\n    }\n\n    /**\n     * Callback called when any properties with accessors created via\n     * `_createPropertyAccessor` have been set.\n     *\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {!Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {!Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @protected\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Method called to determine whether a property value should be\n     * considered as a change and cause the `_propertiesChanged` callback\n     * to be enqueued.\n     *\n     * The default implementation returns `true` for primitive types if a\n     * strict equality check fails, and returns `true` for all Object/Arrays.\n     * The method always returns false for `NaN`.\n     *\n     * Override this method to e.g. provide stricter checking for\n     * Objects/Arrays when using immutable patterns.\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     *   and enqueue a `_proeprtiesChanged` callback\n     * @protected\n     */\n    _shouldPropertyChange(property, value, old) {\n      return (\n        // Strict equality check\n        (old !== value &&\n         // This ensures (old==NaN, value==NaN) always returns false\n         (old === old || value === value))\n      );\n    }\n\n  }\n\n  return PropertyAccessors;\n\n});\n","import {TemplateResult} from 'lit-html';\n\nexport class Template {\n    get name() {\n        return '';\n    }\n\n    template(object) {}\n\n    matches(object, predicate, scope) {}\n}\n\nexport class TemplateRegistry {\n\n    constructor() {\n        this._templates = [];\n    }\n\n    getTemplate(object, predicate, scope) {\n        return this._templates.find(template => {\n            return template.matches(object, predicate, scope);\n        });\n    }\n\n    push(template) {\n        this._templates.push(template);\n    }\n\n    _clear() {\n        this._templates = [];\n    }\n}\n\n\n","import {TemplateRegistry} from './template-registry';\n\nexport const ViewTemplates = new TemplateRegistry();\nexport const FormTemplates = new TemplateRegistry();\n","import {html} from 'lit-html';\nimport {render} from 'lit-html/lib/lit-extended';\nimport {PropertyAccessors} from '@polymer/polymer/lib/mixins/property-accessors';\nimport {ViewTemplates} from '../template-registry';\n\nconst defaultWrapper = (view) => html`\n<style>\n:host {\n    display: block;\n    @apply(--object-view);\n}\n${view}\n</style>`;\n\nconst notFoundTemplate = html`<div>Template not found</div>`;\n\nexport class AgsView extends PropertyAccessors(HTMLElement) {\n\n    constructor(){\n        super();\n\n        this.predicate = null;\n        this.templateScope = null;\n        this.object = null;\n        this.ignoreMissing = false;\n        this.hasBeenRendered = false;\n        this.params = {};\n    }\n\n    static get observedAttributes() {\n        return [\n            'object',\n            'predicate',\n            'templateScope',\n            'ignoreMissing',\n            'params'\n        ];\n    }\n\n    connectedCallback() {\n        this._enableProperties();\n    }\n\n    _propertiesChanged() {\n        this._render();\n    }\n\n    _render() {\n        if(this.object) {\n            if (!this.shadowRoot) {\n                this.attachShadow({mode: 'open'});\n            }\n\n            const template = ViewTemplates.getTemplate(this.object, this.predicate, this.templateScope);\n            let result;\n\n            if (template) {\n                if (template.name) {\n                    this.setAttribute('data-template', template.name);\n                }\n\n                result = defaultWrapper(template.template(this.object, this.params));\n            } else if (!this.ignoreMissing) {\n                result = notFoundTemplate;\n\n                console.warn('Template not found for', this.object);\n            }\n\n            render(result, this.shadowRoot);\n        }\n\n        this.dispatchEvent(new CustomEvent('render', {}));\n    }\n}\n\nfunction replaceContent(elementRoot, newContent) {\n    elementRoot.appendChild(newContent);\n\n    this._setHasBeenRendered(true);\n}\n\nAgsView.createPropertiesForAttributes();\n\nwindow.customElements.define('ags-view', AgsView);\n"],"names":["templates","Map","html","strings","values","template","get","undefined","Template","set","TemplateResult","render","result","container","partCallback","defaultPartCallback","instance","__templateInstance","_partCallback","update","TemplateInstance","fragment","_clone","child","lastChild","removeChild","appendChild","exprMarker","Math","random","TemplatePart","type","index","name","rawName","parts","element","document","createElement","innerHTML","join","walker","createTreeWalker","content","partIndex","nodesToRemove","nextNode","node","currentNode","nodeType","hasAttributes","attributes","i","length","attribute","item","attributeStrings","value","split","attributeString","rawNameString","substring","match","push","removeAttribute","nodeValue","parent","parentNode","lastIndex","textContent","insertBefore","Text","trim","n","getValue","part","__litDirective","AttributePart","size","startIndex","text","v","Array","isArray","Symbol","iterator","t","setAttribute","NodePart","startNode","endNode","_previousValue","_setText","_setTemplateResult","_setIterable","Node","_setNode","then","_setPromise","clear","_insert","nextSibling","previousSibling","TEXT_NODE","itemParts","itemPart","itemStart","previousPart","setValue","lastPart","templatePart","Error","_parts","valueIndex","importNode","extendedPartCallback","startsWith","eventName","EventPart","endsWith","PropertyPart","s","listener","_listener","removeEventListener","addEventListener","event","call","handleEvent","window","JSCompiler_renameProperty","prop","obj","dedupeId","MixinFunction","prototype","__mixinApplications","__mixinSet","dedupingMixin","mixin","mixinApplications","WeakMap","mixinDedupeId","base","baseSet","map","extended","mixinSet","Object","create","caseMap","DASH_TO_CAMEL","CAMEL_TO_DASH","dashToCamelCase","dash","indexOf","replace","m","toUpperCase","camelToDashCase","camel","toLowerCase","microtaskCurrHandle","microtaskLastHandle","microtaskCallbacks","microtaskNodeContent","microtaskNode","createTextNode","MutationObserver","microtaskFlush","observe","characterData","len","cb","e","splice","timeOut","delay","fn","setTimeout","clearTimeout","bind","animationFrame","requestAnimationFrame","cancelAnimationFrame","microTask","callback","handle","idx","caseMap$0","microtask","nativeProperties","proto","HTMLElement","props","getOwnPropertyNames","getPrototypeOf","saveAccessorValue","model","property","__data","_setPendingProperty","__dataProto","hasOwnProperty","PropertyAccessors","superClass","createPropertiesForAttributes","a$","observedAttributes","_createPropertyAccessor","__serializing","__dataCounter","__dataEnabled","__dataReady","__dataInvalid","__dataPending","__dataOld","__dataHasAccessor","__dataInstanceProps","_initializeProperties","old","_attributeToProperty","_initializeProtoProperties","p","_setProperty","assign","hasAttribute","_valueToNodeAttribute","_deserializeValue","arguments","str","_serializeValue","Date","toString","JSON","stringify","x","outValue","Number","Boolean","parse","warn","String","readOnly","defineProperty","_invalidateProperties","changed","_shouldPropertyChange","run","_flushProperties","_initializeInstanceProperties","ready","changedProps","_propertiesChanged","currentProps","oldProps","TemplateRegistry","_templates","object","predicate","scope","find","matches","ViewTemplates","FormTemplates","defaultWrapper","view","notFoundTemplate","AgsView","templateScope","ignoreMissing","hasBeenRendered","params","_enableProperties","_render","shadowRoot","attachShadow","mode","getTemplate","dispatchEvent","CustomEvent","customElements","define"],"mappings":"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"}